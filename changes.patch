From bb87cb17512411e5b6fb80df25c3a4ac8f9ba53c Mon Sep 17 00:00:00 2001
From: Maxi Fischer <maxi.fischer@student.hpi.de>
Date: Tue, 20 Sep 2016 14:59:19 +0200
Subject: [PATCH 1/8] display files in subdirectories

---
 .../backend/algorithm_loading/InputDataFinder.java | 24 ++++++++++++++++++++--
 1 file changed, 22 insertions(+), 2 deletions(-)

diff --git a/backend/src/main/java/de/metanome/backend/algorithm_loading/InputDataFinder.java b/backend/src/main/java/de/metanome/backend/algorithm_loading/InputDataFinder.java
index d7570ed..acff784 100644
--- a/backend/src/main/java/de/metanome/backend/algorithm_loading/InputDataFinder.java
+++ b/backend/src/main/java/de/metanome/backend/algorithm_loading/InputDataFinder.java
@@ -20,6 +20,8 @@ import java.io.File;
 import java.io.FilenameFilter;
 import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Searches for input files in Metanome's input data directory.
@@ -55,7 +57,9 @@ public class InputDataFinder {
    */
   protected File[] retrieveCsvTsvFiles(String pathToFolder) throws UnsupportedEncodingException {
     File folder = new File(URLDecoder.decode(pathToFolder, "utf-8"));
-    return folder.listFiles(new FilenameFilter() {
+    List<File> allFiles = new ArrayList<>();
+    File[] currentFiles = folder.listFiles();
+            /*new FilenameFilter() {
       @Override
       public boolean accept(File file, String name) {
         for (String fileEnding : ACCEPTED_FILE_ENDINGS) {
@@ -65,7 +69,23 @@ public class InputDataFinder {
         }
         return false;
       }
-    });
+    });*/
+    for (int i = 0; i < currentFiles.length; i++) {
+      if (currentFiles[i].isDirectory()) {
+        File[] dirFiles = retrieveCsvTsvFiles(currentFiles[i].getPath());
+        for (int j = 0; j < dirFiles.length; j++) {
+
+          allFiles.add(dirFiles[j]);
+        }
+      } else if (currentFiles[i].isFile()) {
+        for (String fileEnding : ACCEPTED_FILE_ENDINGS) {
+          if (currentFiles[i].getName().endsWith(fileEnding)) {
+            allFiles.add(currentFiles[i]);
+          }
+        }
+      }
+    }
+    return allFiles.toArray(new File[allFiles.size()]);
   }
 
 }
-- 
2.10.2


From 924ddeec1316cdb6ecffc72a1272d0eef3fb2071 Mon Sep 17 00:00:00 2001
From: Maxi Fischer <maxi.fischer@student.hpi.de>
Date: Tue, 20 Sep 2016 17:08:49 +0200
Subject: [PATCH 2/8] fix access of subdirectory files

---
 .../backend/algorithm_loading/InputDataFinder.java      | 17 +++++------------
 .../java/de/metanome/frontend/DatabaseInitializer.java  |  2 +-
 2 files changed, 6 insertions(+), 13 deletions(-)

diff --git a/backend/src/main/java/de/metanome/backend/algorithm_loading/InputDataFinder.java b/backend/src/main/java/de/metanome/backend/algorithm_loading/InputDataFinder.java
index acff784..12c5a0e 100644
--- a/backend/src/main/java/de/metanome/backend/algorithm_loading/InputDataFinder.java
+++ b/backend/src/main/java/de/metanome/backend/algorithm_loading/InputDataFinder.java
@@ -59,22 +59,15 @@ public class InputDataFinder {
     File folder = new File(URLDecoder.decode(pathToFolder, "utf-8"));
     List<File> allFiles = new ArrayList<>();
     File[] currentFiles = folder.listFiles();
-            /*new FilenameFilter() {
-      @Override
-      public boolean accept(File file, String name) {
-        for (String fileEnding : ACCEPTED_FILE_ENDINGS) {
-          if (name.endsWith(fileEnding)) {
-            return true;
-          }
-        }
-        return false;
-      }
-    });*/
+
     for (int i = 0; i < currentFiles.length; i++) {
+      /**
+       * adds files of sub directories to file overview
+       */
       if (currentFiles[i].isDirectory()) {
         File[] dirFiles = retrieveCsvTsvFiles(currentFiles[i].getPath());
+        allFiles.add(currentFiles[i]);
         for (int j = 0; j < dirFiles.length; j++) {
-
           allFiles.add(dirFiles[j]);
         }
       } else if (currentFiles[i].isFile()) {
diff --git a/frontend/src/main/java/de/metanome/frontend/DatabaseInitializer.java b/frontend/src/main/java/de/metanome/frontend/DatabaseInitializer.java
index c15bf3f..a545db9 100644
--- a/frontend/src/main/java/de/metanome/frontend/DatabaseInitializer.java
+++ b/frontend/src/main/java/de/metanome/frontend/DatabaseInitializer.java
@@ -131,7 +131,7 @@ public class DatabaseInitializer implements ServletContextListener {
 
     for (File input : inputs) {
       try {
-        FileInput fileInput = new FileInput(input.getPath());
+        FileInput fileInput = new FileInput(input.getAbsolutePath());
         HibernateUtil.store(fileInput);
       } catch (Exception e) {
         // Could not store file input
-- 
2.10.2


From 489cc0679ed779733b8ab08ece33a4c16933aaf7 Mon Sep 17 00:00:00 2001
From: Maxi Fischer <maxi.fischer@student.hpi.de>
Date: Thu, 6 Oct 2016 01:17:06 +0200
Subject: [PATCH 3/8] add test and null check

---
 .../backend/algorithm_loading/InputDataFinder.java | 49 ++++++++++------
 .../algorithm_loading/InputDataFinderTest.java     |  4 +-
 .../src/test/resources/inputData/nested/inputA.csv |  0
 .../src/test/resources/inputData/nested/inputB.csv |  0
 .../de/metanome/frontend/DatabaseInitializer.java  |  2 +-
 .../resources/inputData/multiple_files/WDC_age.csv | 10 ++++
 .../inputData/multiple_files/WDC_symbols.csv       | 66 ++++++++++++++++++++++
 .../multiple_files/nested/WDC_astronomical.csv     | 12 ++++
 .../inputData/multiple_files/nested/WDC_game.csv   |  9 +++
 9 files changed, 132 insertions(+), 20 deletions(-)
 create mode 100644 backend/src/test/resources/inputData/nested/inputA.csv
 create mode 100644 backend/src/test/resources/inputData/nested/inputB.csv
 create mode 100644 frontend/src/main/resources/inputData/multiple_files/WDC_age.csv
 create mode 100644 frontend/src/main/resources/inputData/multiple_files/WDC_symbols.csv
 create mode 100755 frontend/src/main/resources/inputData/multiple_files/nested/WDC_astronomical.csv
 create mode 100755 frontend/src/main/resources/inputData/multiple_files/nested/WDC_game.csv

diff --git a/backend/src/main/java/de/metanome/backend/algorithm_loading/InputDataFinder.java b/backend/src/main/java/de/metanome/backend/algorithm_loading/InputDataFinder.java
index 12c5a0e..ae9de6c 100644
--- a/backend/src/main/java/de/metanome/backend/algorithm_loading/InputDataFinder.java
+++ b/backend/src/main/java/de/metanome/backend/algorithm_loading/InputDataFinder.java
@@ -21,6 +21,7 @@ import java.io.FilenameFilter;
 import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 /**
@@ -55,30 +56,44 @@ public class InputDataFinder {
    * @return names of all CSV and TSV files located directly in the given directory (no subfolders)
    * @throws UnsupportedEncodingException when file path is not utf-8 decoded
    */
-  protected File[] retrieveCsvTsvFiles(String pathToFolder) throws UnsupportedEncodingException {
+  File[] retrieveCsvTsvFiles(String pathToFolder) throws UnsupportedEncodingException {
     File folder = new File(URLDecoder.decode(pathToFolder, "utf-8"));
     List<File> allFiles = new ArrayList<>();
     File[] currentFiles = folder.listFiles();
 
-    for (int i = 0; i < currentFiles.length; i++) {
-      /**
-       * adds files of sub directories to file overview
-       */
-      if (currentFiles[i].isDirectory()) {
-        File[] dirFiles = retrieveCsvTsvFiles(currentFiles[i].getPath());
-        allFiles.add(currentFiles[i]);
-        for (int j = 0; j < dirFiles.length; j++) {
-          allFiles.add(dirFiles[j]);
-        }
-      } else if (currentFiles[i].isFile()) {
-        for (String fileEnding : ACCEPTED_FILE_ENDINGS) {
-          if (currentFiles[i].getName().endsWith(fileEnding)) {
-            allFiles.add(currentFiles[i]);
+      if (currentFiles != null) {
+          for (File currentFile : currentFiles) {
+              /**
+               * adds files of sub directories to file overview
+               */
+              if (currentFile.isDirectory()) {
+                  File[] dirFiles = retrieveCsvTsvFiles(currentFile.getPath());
+                  allFiles.add(currentFile);
+                  Collections.addAll(allFiles, dirFiles);
+              } else if (currentFile.isFile()) {
+                  for (String fileEnding : ACCEPTED_FILE_ENDINGS) {
+                      if (currentFile.getName().endsWith(fileEnding)) {
+                          allFiles.add(currentFile);
+                      }
+                  }
+              }
+          }
+      } else {
+          return new File[0];
+      }
+      return allFiles.toArray(new File[allFiles.size()]);
+
+    /*return folder.listFiles(new FilenameFilter() {
+      @Override
+      public boolean accept(File file, String name) {
+        for (String fileEnding : InputDataFinder.ACCEPTED_FILE_ENDINGS) {
+          if (name.endsWith(fileEnding)) {
+            return true;
           }
         }
+        return false;
       }
-    }
-    return allFiles.toArray(new File[allFiles.size()]);
+    });*/
   }
 
 }
diff --git a/backend/src/test/java/de/metanome/backend/algorithm_loading/InputDataFinderTest.java b/backend/src/test/java/de/metanome/backend/algorithm_loading/InputDataFinderTest.java
index 5f58070..5724f2c 100644
--- a/backend/src/test/java/de/metanome/backend/algorithm_loading/InputDataFinderTest.java
+++ b/backend/src/test/java/de/metanome/backend/algorithm_loading/InputDataFinderTest.java
@@ -58,7 +58,7 @@ public class InputDataFinderTest {
 
     //Check
     assertEquals(0, filesInAlgorithmsFolder.length);
-    assertEquals(7, filesInInputFolder.length);
+    assertEquals(10, filesInInputFolder.length);
   }
 
   /**
@@ -72,6 +72,6 @@ public class InputDataFinderTest {
     File[] actualFiles = inputDataFinder.getAvailableFiles();
 
     //Check
-    assertEquals(7, actualFiles.length);
+    assertEquals(10, actualFiles.length);
   }
 }
diff --git a/backend/src/test/resources/inputData/nested/inputA.csv b/backend/src/test/resources/inputData/nested/inputA.csv
new file mode 100644
index 0000000..e69de29
diff --git a/backend/src/test/resources/inputData/nested/inputB.csv b/backend/src/test/resources/inputData/nested/inputB.csv
new file mode 100644
index 0000000..e69de29
diff --git a/frontend/src/main/java/de/metanome/frontend/DatabaseInitializer.java b/frontend/src/main/java/de/metanome/frontend/DatabaseInitializer.java
index a545db9..c15bf3f 100644
--- a/frontend/src/main/java/de/metanome/frontend/DatabaseInitializer.java
+++ b/frontend/src/main/java/de/metanome/frontend/DatabaseInitializer.java
@@ -131,7 +131,7 @@ public class DatabaseInitializer implements ServletContextListener {
 
     for (File input : inputs) {
       try {
-        FileInput fileInput = new FileInput(input.getAbsolutePath());
+        FileInput fileInput = new FileInput(input.getPath());
         HibernateUtil.store(fileInput);
       } catch (Exception e) {
         // Could not store file input
diff --git a/frontend/src/main/resources/inputData/multiple_files/WDC_age.csv b/frontend/src/main/resources/inputData/multiple_files/WDC_age.csv
new file mode 100644
index 0000000..5877395
--- /dev/null
+++ b/frontend/src/main/resources/inputData/multiple_files/WDC_age.csv
@@ -0,0 +1,10 @@
+Planet,RotationPeriod,RevolutionPeriod
+Mercury,58.6 days,87.97 days
+Venus,243 days,224.7 days
+Earth,0.99 days,365.26 days
+Mars,1.03 days,1.88 years
+Jupiter,0.41 days,11.86 years
+Saturn,0.45 days,29.46 years
+Uranus,0.72 days,84.01 years
+Neptune,0.67 days,164.79 years
+Pluto,6.39 days,248.59 years
\ No newline at end of file
diff --git a/frontend/src/main/resources/inputData/multiple_files/WDC_symbols.csv b/frontend/src/main/resources/inputData/multiple_files/WDC_symbols.csv
new file mode 100644
index 0000000..57c1e6c
--- /dev/null
+++ b/frontend/src/main/resources/inputData/multiple_files/WDC_symbols.csv
@@ -0,0 +1,66 @@
+Symbol,Unicode,Glyph
+Sun,U+2609,☉
+Sun,U+1F71A,🜚
+Moon,U+263D,☽
+Moon,U+263E,☾
+Mercury,U+263F,☿
+Venus,U+2640,♀
+Earth,U+1F728,🜨
+Mars,U+2642,♂
+Jupiter,U+2643,♃
+Saturn,U+2644,♄
+Uranus,U+2645,♅
+Uranus,U+26E2,⛢
+Neptune,U+2646,♆
+1 Ceres,U+02A1,ʡ
+2 Pallas,U+26B4,⚴
+3 Juno,U+26B5,⚵
+4 Vesta,U+26B6,⚶
+10 Hygiea,U+2695,⚕
+2060 Chiron,U+26B7,⚷
+Eris,not present,--
+Eris,not present,--
+Eris,≈ U+2641,♁
+Eris,≈ U+29EC,⧬
+Pluto,U+2647,♇
+Pluto,not present,--
+Aries,U+2648,♈
+Taurus,U+2649,♉
+Gemini,U+264A,♊
+Cancer,U+264B,♋
+Leo,U+264C,♌
+Virgo,U+264D,♍
+Libra,U+264E,♎
+Scorpio,U+264F,♏
+Sagittarius,U+2650,♐
+Capricorn,U+2651,♑
+Capricorn,U+2651,♑
+Aquarius,U+2652,♒
+Pisces,U+2653,♓
+Conjunction,U+260C,☌
+Semisextile,U+26BA,⚺
+Semi-square,≈ U+2220,∠
+Sextile,U+26B9,⚹
+Quintile,U+0051,Q
+Square,U+25A1,□
+Trine,U+25B3,△
+Sesquiquadrate,U+26BC,⚼
+Biquintile,U+0062 U+0051,bQ
+Quincunx,U+26BB,⚻
+Opposition,U+260D,☍
+New moon,U+1F311,🌑
+Crescent moon,U+1F312,🌒
+First quarter moon,U+1F313,🌓
+Gibbous moon,U+1F314,🌔
+Full moon,U+1F315,🌕
+Disseminating moon,U+1F316,🌖
+Last quarter moon,U+1F317,🌗
+Balsamic moon,U+1F318,🌘
+Ascendant,not plain text,ASC
+Midheaven,not plain text,MC
+Ascending node,U+260A,☊
+Descending node,U+260B,☋
+Black Moon Lilith,U+26B8,⚸
+Retrograde motion,≈ U+211E,℞
+Lot of fortune,≈ U+2297,⊗
+Comet,U+2604,☄
\ No newline at end of file
diff --git a/frontend/src/main/resources/inputData/multiple_files/nested/WDC_astronomical.csv b/frontend/src/main/resources/inputData/multiple_files/nested/WDC_astronomical.csv
new file mode 100755
index 0000000..10e1cc7
--- /dev/null
+++ b/frontend/src/main/resources/inputData/multiple_files/nested/WDC_astronomical.csv
@@ -0,0 +1,12 @@
+Name,IAU_Abbreviation,Symbol,Unicode,UnicodeDisplay,Represents
+Mercury,Me,,U+263F; (dec 9791),☿,"Mercury&#39;s winged helmet and caduceus, or the caduceus alone"
+Venus,V,,U+2640; (dec 9792),♀,Venus&#39; hand mirror
+Earth,E,,U+2641; (dec 9793),♁,"a globus cruciger, or an inverted symbol for Venus; more popular in non-geocentric contexts"
+Earth,E,,U+1F728; (dec 128808),ⴲ,Globe with equator and a meridian
+Mars,Ma,,U+2642; (dec 9794),♂,Mars&#39; shield and spear
+Jupiter,J,,U+2643; (dec 9795),♃,"Jupiter&#39;s thunderbolt, an eagle, or the letter zeta or Z for Zeus, the Greek god analogous to Jupite"
+Saturn,S,,U+2644; (dec 9796),♄,Saturn&#39;s sickle or scythe
+Uranus,U,,U+26E2; (dec 9954),⛢,Platinum
+Uranus,U,,U+2645; (dec 9797),♅,"A globe surmounted by the letter H (for Herschel), more common in older or British literature"
+Neptune,N,,U+2646; (dec 9798),♆,Neptune&#39;s trident
+Neptune,N,,N/A,N/A,"A globe surmounted by the letters &quot;L&quot; and &quot;V&quot;(, for Le Verrier), more common in older, especially Fr"
\ No newline at end of file
diff --git a/frontend/src/main/resources/inputData/multiple_files/nested/WDC_game.csv b/frontend/src/main/resources/inputData/multiple_files/nested/WDC_game.csv
new file mode 100755
index 0000000..d16019f
--- /dev/null
+++ b/frontend/src/main/resources/inputData/multiple_files/nested/WDC_game.csv
@@ -0,0 +1,9 @@
+SitGoBuy-in,DivisionName,LowOrbitLeaderBoardPrizePool,HighOrbitLeaderBoardPrizePool,TotalDivisionPrizePool
+$1-$2.99,Mercury,"$1,500","$1,500","$3,000.00"
+$3-$4.99,Mars,"$2,000","$2,000","$4,000.00"
+$5-$9.99,Venus,"$2,500","$2,500","$5,000.00"
+$10-$19.99,Earth,"$3,000","$3,000","$6,000.00"
+$20-$49.99,Neptune,"$3,500","$3,500","$7,000.00"
+$50-$99.99,Uranus,"$4,000","$4,000","$8,000.00"
+$100-$299.99,Saturn,"$4,500","$4,500","$9,000.00"
+$300+,Jupiter,"$5,000","$5,000","$10,000.00"
\ No newline at end of file
-- 
2.10.2


From a8a2a57dfc070db5bce19e1bad6269e879efe513 Mon Sep 17 00:00:00 2001
From: Maxi Fischer <maxi.fischer@student.hpi.de>
Date: Thu, 6 Oct 2016 01:53:36 +0200
Subject: [PATCH 4/8] show one element in directory

---
 .../input/file/DefaultFileInputGenerator.java      | 31 +++++++++++++++++-----
 .../input/file/DefaultFileInputGeneratorTest.java  |  4 +--
 2 files changed, 26 insertions(+), 9 deletions(-)

diff --git a/backend/src/main/java/de/metanome/backend/input/file/DefaultFileInputGenerator.java b/backend/src/main/java/de/metanome/backend/input/file/DefaultFileInputGenerator.java
index c28d101..11bbc7a 100644
--- a/backend/src/main/java/de/metanome/backend/input/file/DefaultFileInputGenerator.java
+++ b/backend/src/main/java/de/metanome/backend/input/file/DefaultFileInputGenerator.java
@@ -22,10 +22,15 @@ import de.metanome.algorithm_integration.input.FileInputGenerator;
 import de.metanome.algorithm_integration.input.InputGenerationException;
 import de.metanome.algorithm_integration.input.InputIterationException;
 import de.metanome.algorithm_integration.input.RelationalInput;
+import de.metanome.backend.algorithm_loading.InputDataFinder;
 
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileReader;
+import java.io.FilenameFilter;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 
 /**
  * Generator for {@link de.metanome.algorithm_integration.input.RelationalInput}s based on file
@@ -36,7 +41,7 @@ import java.io.FileReader;
  */
 public class DefaultFileInputGenerator implements FileInputGenerator {
 
-  protected File inputFile;
+  List<File> inputFile = new ArrayList<>();
   protected ConfigurationSettingFileInput setting;
 
   protected DefaultFileInputGenerator() {
@@ -72,7 +77,7 @@ public class DefaultFileInputGenerator implements FileInputGenerator {
   @Override
   public RelationalInput generateNewCopy() throws InputGenerationException {
     try {
-      return new FileIterator(inputFile.getName(), new FileReader(inputFile), setting);
+      return new FileIterator(inputFile.get(0).getName(), new FileReader(inputFile.get(0)), setting);
     } catch (FileNotFoundException e) {
       throw new InputGenerationException("File not found!", e);
     } catch (InputIterationException e) {
@@ -85,14 +90,26 @@ public class DefaultFileInputGenerator implements FileInputGenerator {
    */
   @Override
   public File getInputFile() {
-    return inputFile;
+    return inputFile.get(0);
   }
 
-  protected void setInputFile(File inputFile) throws FileNotFoundException {
-    if (!inputFile.isFile()) {
-      throw new FileNotFoundException();
+  private void setInputFile(File inputFile) throws FileNotFoundException {
+    if (inputFile.isFile()) {
+      this.inputFile.add(inputFile);
+    } else if (inputFile.isDirectory()) {
+      File[] filesInDirectory = inputFile.listFiles(new FilenameFilter() {
+        @Override
+        public boolean accept(File file, String name) {
+          for (String fileEnding : InputDataFinder.ACCEPTED_FILE_ENDINGS) {
+            if (name.endsWith(fileEnding)) {
+              return true;
+            }
+          }
+          return false;
+        }
+      });
+      Collections.addAll(this.inputFile, filesInDirectory);
     }
-    this.inputFile = inputFile;
   }
 
   /**
diff --git a/backend/src/test/java/de/metanome/backend/input/file/DefaultFileInputGeneratorTest.java b/backend/src/test/java/de/metanome/backend/input/file/DefaultFileInputGeneratorTest.java
index 3a02d37..03197b7 100644
--- a/backend/src/test/java/de/metanome/backend/input/file/DefaultFileInputGeneratorTest.java
+++ b/backend/src/test/java/de/metanome/backend/input/file/DefaultFileInputGeneratorTest.java
@@ -84,7 +84,7 @@ public class DefaultFileInputGeneratorTest {
   @Test
   public void testConstructor() {
     // Check result
-    assertEquals(expectedFile, generator.inputFile);
+    assertEquals(expectedFile, generator.inputFile.get(0));
     assertEquals(expectedSetting, generator.getSetting());
   }
 
@@ -106,7 +106,7 @@ public class DefaultFileInputGeneratorTest {
     DefaultFileInputGenerator actualGenerator = new DefaultFileInputGenerator(expectedFile);
 
     // Check result
-    assertEquals(expectedFile, actualGenerator.inputFile);
+    assertEquals(expectedFile, actualGenerator.inputFile.get(0));
     assertEquals(defaultSetting.hasHeader(), actualGenerator.getSetting().hasHeader());
     assertEquals(defaultSetting.isSkipDifferingLines(),
       actualGenerator.getSetting().isSkipDifferingLines());
-- 
2.10.2


From 4483052eecd8677d757605e110d9a37e99ed1bd3 Mon Sep 17 00:00:00 2001
From: Maxi Fischer <maxi.fischer@student.hpi.de>
Date: Tue, 18 Oct 2016 13:45:07 +0200
Subject: [PATCH 5/8] convert directory to files in backend

---
 .../algorithm_execution/AlgorithmExecution.java    | 37 ++++++++++++++++++----
 ...DefaultRelationalInputGeneratorInitializer.java | 32 +++++++++++++++++--
 .../input/file/DefaultFileInputGenerator.java      | 32 +++++++++----------
 .../result_postprocessing/ResultPostProcessor.java | 35 +++++++++++++++++---
 4 files changed, 106 insertions(+), 30 deletions(-)

diff --git a/backend/src/main/java/de/metanome/backend/algorithm_execution/AlgorithmExecution.java b/backend/src/main/java/de/metanome/backend/algorithm_execution/AlgorithmExecution.java
index 41a7806..3a3bc96 100644
--- a/backend/src/main/java/de/metanome/backend/algorithm_execution/AlgorithmExecution.java
+++ b/backend/src/main/java/de/metanome/backend/algorithm_execution/AlgorithmExecution.java
@@ -22,22 +22,23 @@ import de.metanome.algorithm_integration.algorithm_execution.FileGenerator;
 import de.metanome.algorithm_integration.configuration.ConfigurationValue;
 import de.metanome.algorithm_integration.input.*;
 import de.metanome.algorithm_integration.results.JsonConverter;
+import de.metanome.backend.algorithm_loading.InputDataFinder;
 import de.metanome.backend.helper.*;
+import de.metanome.backend.input.file.DefaultFileInputGenerator;
 import de.metanome.backend.resources.AlgorithmResource;
 import de.metanome.backend.result_receiver.ResultCache;
 import de.metanome.backend.result_receiver.ResultCounter;
 import de.metanome.backend.result_receiver.ResultPrinter;
 import de.metanome.backend.result_receiver.ResultReceiver;
 import de.metanome.backend.results_db.ExecutionSetting;
+import de.metanome.backend.results_db.FileInput;
 import de.metanome.backend.results_db.HibernateUtil;
 import de.metanome.backend.results_db.Input;
 import org.hibernate.Criteria;
 import org.hibernate.Session;
 import org.hibernate.criterion.Restrictions;
 
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
+import java.io.*;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -54,12 +55,34 @@ public class AlgorithmExecution {
    * @throws AlgorithmConfigurationException if the input could not be converted into an input generator
    * @throws InputGenerationException if no relational input could be generated
    */
-  protected static List<ColumnIdentifier> extractColumnNames(List<Input> inputs) throws AlgorithmConfigurationException, InputGenerationException {
+  protected static List<ColumnIdentifier> extractColumnNames(List<Input> inputs) throws AlgorithmConfigurationException, InputGenerationException, FileNotFoundException {
     List<RelationalInputGenerator> inputGenerators = new ArrayList<>();
     for (Input input : inputs) {
-      RelationalInputGenerator inputGenerator = InputToGeneratorConverter.convertInput(input);
-      if (inputGenerator != null) {
-        inputGenerators.add(inputGenerator);
+      if (input instanceof FileInput) {
+        File currFile = new File(input.getName());
+        if (currFile.isFile()) {
+          inputGenerators.add(InputToGeneratorConverter.convertInput(input));
+        } else if (currFile.isDirectory()) {
+          File[] filesInDirectory = currFile.listFiles(new FilenameFilter() {
+            @Override
+            public boolean accept(File file, String name) {
+              for (String fileEnding : InputDataFinder.ACCEPTED_FILE_ENDINGS) {
+                if (name.endsWith(fileEnding)) {
+                  return true;
+                }
+              }
+              return false;
+            }
+          });
+          for (File file : filesInDirectory) {
+            inputGenerators.add(new DefaultFileInputGenerator(file, InputToGeneratorConverter.convertInputToSetting((FileInput) input)));
+          }
+        }
+      } else {
+        RelationalInputGenerator relInpGen = InputToGeneratorConverter.convertInput(input);
+        if (relInpGen != null) {
+          inputGenerators.add(relInpGen);
+        }
       }
     }
 
diff --git a/backend/src/main/java/de/metanome/backend/input/DefaultRelationalInputGeneratorInitializer.java b/backend/src/main/java/de/metanome/backend/input/DefaultRelationalInputGeneratorInitializer.java
index 7fa275f..7b3750e 100644
--- a/backend/src/main/java/de/metanome/backend/input/DefaultRelationalInputGeneratorInitializer.java
+++ b/backend/src/main/java/de/metanome/backend/input/DefaultRelationalInputGeneratorInitializer.java
@@ -22,12 +22,17 @@ import de.metanome.algorithm_integration.configuration.ConfigurationRequirementR
 import de.metanome.algorithm_integration.configuration.ConfigurationSettingFileInput;
 import de.metanome.algorithm_integration.configuration.ConfigurationSettingRelationalInput;
 import de.metanome.algorithm_integration.configuration.ConfigurationSettingTableInput;
+import de.metanome.algorithm_integration.input.FileInputGenerator;
 import de.metanome.algorithm_integration.input.RelationalInputGenerator;
 import de.metanome.algorithm_integration.input.RelationalInputGeneratorInitializer;
+import de.metanome.backend.algorithm_loading.InputDataFinder;
 import de.metanome.backend.configuration.ConfigurationValueRelationalInputGenerator;
 import de.metanome.backend.input.database.DefaultTableInputGenerator;
 import de.metanome.backend.input.file.DefaultFileInputGenerator;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FilenameFilter;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -67,8 +72,31 @@ public class DefaultRelationalInputGeneratorInitializer
   @Override
   public void initialize(ConfigurationSettingFileInput setting)
     throws AlgorithmConfigurationException {
-    generatorList.add(new DefaultFileInputGenerator(setting));
-  }
+
+    File currFile = new File(setting.getFileName());
+    try {
+      if (currFile.isFile()) {
+          generatorList.add(new DefaultFileInputGenerator(currFile, setting));
+      } else if (currFile.isDirectory()) {
+          File[] filesInDirectory = currFile.listFiles(new FilenameFilter() {
+            @Override
+            public boolean accept(File file, String name) {
+              for (String fileEnding : InputDataFinder.ACCEPTED_FILE_ENDINGS) {
+                if (name.endsWith(fileEnding)) {
+                  return true;
+                }
+              }
+              return false;
+            }
+          });
+          for (File file : filesInDirectory) {
+            generatorList.add(new DefaultFileInputGenerator(file, setting));
+          }
+        }
+      } catch (FileNotFoundException e) {
+        e.printStackTrace();
+      }
+    }
 
   /**
    * Initialize {@link de.metanome.algorithm_integration.input.RelationalInputGenerator} from a
diff --git a/backend/src/main/java/de/metanome/backend/input/file/DefaultFileInputGenerator.java b/backend/src/main/java/de/metanome/backend/input/file/DefaultFileInputGenerator.java
index 11bbc7a..d02245f 100644
--- a/backend/src/main/java/de/metanome/backend/input/file/DefaultFileInputGenerator.java
+++ b/backend/src/main/java/de/metanome/backend/input/file/DefaultFileInputGenerator.java
@@ -41,7 +41,7 @@ import java.util.List;
  */
 public class DefaultFileInputGenerator implements FileInputGenerator {
 
-  List<File> inputFile = new ArrayList<>();
+  File inputFile;
   protected ConfigurationSettingFileInput setting;
 
   protected DefaultFileInputGenerator() {
@@ -74,10 +74,19 @@ public class DefaultFileInputGenerator implements FileInputGenerator {
     this.setting = setting;
   }
 
+  public DefaultFileInputGenerator(File inputFile, ConfigurationSettingFileInput setting)
+          throws AlgorithmConfigurationException, FileNotFoundException {
+    try {
+      this.setInputFile(inputFile);
+    } catch (FileNotFoundException e) {
+      throw new AlgorithmConfigurationException("File not found!", e);
+    }
+    this.setting = setting;
+  }
   @Override
   public RelationalInput generateNewCopy() throws InputGenerationException {
     try {
-      return new FileIterator(inputFile.get(0).getName(), new FileReader(inputFile.get(0)), setting);
+      return new FileIterator(inputFile.getName(), new FileReader(inputFile), setting);
     } catch (FileNotFoundException e) {
       throw new InputGenerationException("File not found!", e);
     } catch (InputIterationException e) {
@@ -90,25 +99,14 @@ public class DefaultFileInputGenerator implements FileInputGenerator {
    */
   @Override
   public File getInputFile() {
-    return inputFile.get(0);
+    return inputFile;
   }
 
   private void setInputFile(File inputFile) throws FileNotFoundException {
     if (inputFile.isFile()) {
-      this.inputFile.add(inputFile);
-    } else if (inputFile.isDirectory()) {
-      File[] filesInDirectory = inputFile.listFiles(new FilenameFilter() {
-        @Override
-        public boolean accept(File file, String name) {
-          for (String fileEnding : InputDataFinder.ACCEPTED_FILE_ENDINGS) {
-            if (name.endsWith(fileEnding)) {
-              return true;
-            }
-          }
-          return false;
-        }
-      });
-      Collections.addAll(this.inputFile, filesInDirectory);
+      this.inputFile = inputFile;
+    } else {
+      throw new FileNotFoundException();
     }
   }
 
diff --git a/backend/src/main/java/de/metanome/backend/result_postprocessing/ResultPostProcessor.java b/backend/src/main/java/de/metanome/backend/result_postprocessing/ResultPostProcessor.java
index 00e4450..281960c 100644
--- a/backend/src/main/java/de/metanome/backend/result_postprocessing/ResultPostProcessor.java
+++ b/backend/src/main/java/de/metanome/backend/result_postprocessing/ResultPostProcessor.java
@@ -22,16 +22,18 @@ import de.metanome.algorithm_integration.input.InputGenerationException;
 import de.metanome.algorithm_integration.input.InputIterationException;
 import de.metanome.algorithm_integration.input.RelationalInputGenerator;
 import de.metanome.algorithm_integration.results.*;
+import de.metanome.backend.algorithm_loading.InputDataFinder;
 import de.metanome.backend.helper.InputToGeneratorConverter;
+import de.metanome.backend.input.file.DefaultFileInputGenerator;
 import de.metanome.backend.result_postprocessing.result_analyzer.*;
 import de.metanome.backend.result_postprocessing.result_store.*;
 import de.metanome.backend.result_postprocessing.results.*;
 import de.metanome.backend.result_receiver.ResultReader;
-import de.metanome.backend.results_db.Execution;
-import de.metanome.backend.results_db.Input;
+import de.metanome.backend.results_db.*;
 import de.metanome.backend.results_db.Result;
-import de.metanome.backend.results_db.ResultType;
 
+import java.io.File;
+import java.io.FilenameFilter;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -134,7 +136,32 @@ public class ResultPostProcessor {
     // get input generators
     List<RelationalInputGenerator> inputGenerators = new ArrayList<>();
     for (Input input : inputs) {
-      inputGenerators.add(InputToGeneratorConverter.convertInput(input));
+      if (input instanceof FileInput) {
+        File currFile = new File(input.getName());
+        if (currFile.isFile()) {
+          inputGenerators.add(InputToGeneratorConverter.convertInput(input));
+        } else if (currFile.isDirectory()) {
+          File[] filesInDirectory = currFile.listFiles(new FilenameFilter() {
+            @Override
+            public boolean accept(File file, String name) {
+              for (String fileEnding : InputDataFinder.ACCEPTED_FILE_ENDINGS) {
+                if (name.endsWith(fileEnding)) {
+                  return true;
+                }
+              }
+              return false;
+            }
+          });
+          for (File file : filesInDirectory) {
+            inputGenerators.add(new DefaultFileInputGenerator(file, InputToGeneratorConverter.convertInputToSetting((FileInput) input)));
+          }
+        }
+      } else {
+        RelationalInputGenerator relInpGen = InputToGeneratorConverter.convertInput(input);
+        if (relInpGen != null) {
+          inputGenerators.add(relInpGen);
+        }
+      }
     }
 
     // check if a database connection was used
-- 
2.10.2


From 6d0e7b17017341dbcc0847b7d5661531846503c4 Mon Sep 17 00:00:00 2001
From: Maxi Fischer <maxi.fischer@student.hpi.de>
Date: Tue, 18 Oct 2016 13:48:31 +0200
Subject: [PATCH 6/8] adapt tests to directory use

---
 .../backend/algorithm_execution/AlgorithmExecutionTest.java    |  3 ++-
 .../ConfigurationValueFileInputGeneratorTest.java              |  3 ++-
 .../backend/configuration/ConfigurationValueIntegerTest.java   |  3 ++-
 .../backend/configuration/DefaultConfigurationFactoryTest.java | 10 +++++-----
 .../backend/input/file/DefaultFileInputGeneratorTest.java      |  4 ++--
 5 files changed, 13 insertions(+), 10 deletions(-)

diff --git a/backend/src/test/java/de/metanome/backend/algorithm_execution/AlgorithmExecutionTest.java b/backend/src/test/java/de/metanome/backend/algorithm_execution/AlgorithmExecutionTest.java
index a865337..c21d1ab 100644
--- a/backend/src/test/java/de/metanome/backend/algorithm_execution/AlgorithmExecutionTest.java
+++ b/backend/src/test/java/de/metanome/backend/algorithm_execution/AlgorithmExecutionTest.java
@@ -29,6 +29,7 @@ import de.metanome.backend.results_db.Input;
 import org.junit.Test;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -105,7 +106,7 @@ public class AlgorithmExecutionTest {
 
 
   @Test
-  public void testExtractColumnNames() throws AlgorithmConfigurationException, InputGenerationException {
+  public void testExtractColumnNames() throws AlgorithmConfigurationException, InputGenerationException, FileNotFoundException {
     // Set up
     List<Input> inputs = new ArrayList<>();
     String
diff --git a/backend/src/test/java/de/metanome/backend/configuration/ConfigurationValueFileInputGeneratorTest.java b/backend/src/test/java/de/metanome/backend/configuration/ConfigurationValueFileInputGeneratorTest.java
index bd49036..1a7b772 100644
--- a/backend/src/test/java/de/metanome/backend/configuration/ConfigurationValueFileInputGeneratorTest.java
+++ b/backend/src/test/java/de/metanome/backend/configuration/ConfigurationValueFileInputGeneratorTest.java
@@ -24,6 +24,7 @@ import de.metanome.algorithm_integration.input.FileInputGenerator;
 import org.junit.Test;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -105,7 +106,7 @@ public class ConfigurationValueFileInputGeneratorTest {
    * to {@link de.metanome.backend.configuration.ConfigurationValueFileInputGenerator}s.
    */
   @Test
-  public void testConstructorRequirement() throws AlgorithmConfigurationException {
+  public void testConstructorRequirement() throws AlgorithmConfigurationException, FileNotFoundException {
     // Setup
     // Expected values
     String expectedIdentifier = "some identifier";
diff --git a/backend/src/test/java/de/metanome/backend/configuration/ConfigurationValueIntegerTest.java b/backend/src/test/java/de/metanome/backend/configuration/ConfigurationValueIntegerTest.java
index e3bd49d..a379f6f 100644
--- a/backend/src/test/java/de/metanome/backend/configuration/ConfigurationValueIntegerTest.java
+++ b/backend/src/test/java/de/metanome/backend/configuration/ConfigurationValueIntegerTest.java
@@ -23,6 +23,7 @@ import de.metanome.algorithm_integration.configuration.ConfigurationRequirementI
 import de.metanome.algorithm_integration.configuration.ConfigurationSettingInteger;
 import org.junit.Test;
 
+import java.io.FileNotFoundException;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -63,7 +64,7 @@ public class ConfigurationValueIntegerTest {
    * The integers in the requirement should be properly stored in the value.
    */
   @Test
-  public void testConstructorRequirement() throws AlgorithmConfigurationException {
+  public void testConstructorRequirement() throws AlgorithmConfigurationException, FileNotFoundException {
     // Expected values
     Integer[] expectedValues = {3, 6, 12309478};
     String expectedIdentifier = "some identifier";
diff --git a/backend/src/test/java/de/metanome/backend/configuration/DefaultConfigurationFactoryTest.java b/backend/src/test/java/de/metanome/backend/configuration/DefaultConfigurationFactoryTest.java
index 4b1ce2a..252f768 100644
--- a/backend/src/test/java/de/metanome/backend/configuration/DefaultConfigurationFactoryTest.java
+++ b/backend/src/test/java/de/metanome/backend/configuration/DefaultConfigurationFactoryTest.java
@@ -53,7 +53,7 @@ public class DefaultConfigurationFactoryTest {
    * be correctly converted to {@link de.metanome.backend.configuration.ConfigurationValueBoolean}s.
    */
   @Test
-  public void testBuildBoolean() throws AlgorithmConfigurationException {
+  public void testBuildBoolean() throws AlgorithmConfigurationException, FileNotFoundException {
     // Setup
     // Expected values
     String expectedIdentifier = "some identifier";
@@ -84,7 +84,7 @@ public class DefaultConfigurationFactoryTest {
    * be correctly converted to {@link de.metanome.backend.configuration.ConfigurationValueInteger}s.
    */
   @Test
-  public void testBuildInteger() throws AlgorithmConfigurationException {
+  public void testBuildInteger() throws AlgorithmConfigurationException, FileNotFoundException {
     // Setup
     // Expected values
     String expectedIdentifier = "some identifier";
@@ -115,7 +115,7 @@ public class DefaultConfigurationFactoryTest {
    * be correctly converted to {@link de.metanome.backend.configuration.ConfigurationValueListBox}s.
    */
   @Test
-  public void testBuildListBox() throws AlgorithmConfigurationException {
+  public void testBuildListBox() throws AlgorithmConfigurationException, FileNotFoundException {
     // Setup
     String expectedIdentifier = "some identifier";
     ArrayList<String> possibleValues = new ArrayList<>();
@@ -140,7 +140,7 @@ public class DefaultConfigurationFactoryTest {
   }
 
   @Test
-  public void testBuildCheckBox() throws AlgorithmConfigurationException {
+  public void testBuildCheckBox() throws AlgorithmConfigurationException, FileNotFoundException {
     // Setup
     String expectedIdentifier = "some identifier";
     String[] possibleValues = new String[2];
@@ -235,7 +235,7 @@ public class DefaultConfigurationFactoryTest {
    * be correctly converted to {@link de.metanome.backend.configuration.ConfigurationValueString}s.
    */
   @Test
-  public void testBuildString() throws AlgorithmConfigurationException {
+  public void testBuildString() throws AlgorithmConfigurationException, FileNotFoundException {
     // Setup
     // Expected values
     String expectedIdentifier = "some identifier";
diff --git a/backend/src/test/java/de/metanome/backend/input/file/DefaultFileInputGeneratorTest.java b/backend/src/test/java/de/metanome/backend/input/file/DefaultFileInputGeneratorTest.java
index 03197b7..3a02d37 100644
--- a/backend/src/test/java/de/metanome/backend/input/file/DefaultFileInputGeneratorTest.java
+++ b/backend/src/test/java/de/metanome/backend/input/file/DefaultFileInputGeneratorTest.java
@@ -84,7 +84,7 @@ public class DefaultFileInputGeneratorTest {
   @Test
   public void testConstructor() {
     // Check result
-    assertEquals(expectedFile, generator.inputFile.get(0));
+    assertEquals(expectedFile, generator.inputFile);
     assertEquals(expectedSetting, generator.getSetting());
   }
 
@@ -106,7 +106,7 @@ public class DefaultFileInputGeneratorTest {
     DefaultFileInputGenerator actualGenerator = new DefaultFileInputGenerator(expectedFile);
 
     // Check result
-    assertEquals(expectedFile, actualGenerator.inputFile.get(0));
+    assertEquals(expectedFile, actualGenerator.inputFile);
     assertEquals(defaultSetting.hasHeader(), actualGenerator.getSetting().hasHeader());
     assertEquals(defaultSetting.isSkipDifferingLines(),
       actualGenerator.getSetting().isSkipDifferingLines());
-- 
2.10.2


From 47cef05ac0d32e30d780bab65a9b2b1db1055d3f Mon Sep 17 00:00:00 2001
From: Maxi Fischer <maxi.fischer@student.hpi.de>
Date: Tue, 18 Oct 2016 13:49:22 +0200
Subject: [PATCH 7/8] handle FileNotFoundException

---
 .../configuration/ConfigurationFactory.java        | 18 +++++-----
 .../configuration/ConfigurationRequirement.java    |  3 +-
 .../ConfigurationRequirementBoolean.java           |  3 +-
 .../ConfigurationRequirementCheckBox.java          |  3 +-
 ...ConfigurationRequirementDatabaseConnection.java |  3 +-
 .../ConfigurationRequirementFileInput.java         |  3 +-
 .../ConfigurationRequirementInteger.java           |  3 +-
 .../ConfigurationRequirementListBox.java           |  3 +-
 .../ConfigurationRequirementString.java            |  3 +-
 .../ConfigurationRequirementTableInput.java        |  3 +-
 .../backend/configuration/ConfigurationValue.java  |  5 +--
 .../configuration/ConfigurationValueBoolean.java   |  3 +-
 .../configuration/ConfigurationValueCheckBox.java  |  3 +-
 ...figurationValueDatabaseConnectionGenerator.java |  3 +-
 .../ConfigurationValueFileInputGenerator.java      | 40 ++++++++++++++++++----
 .../configuration/ConfigurationValueInteger.java   |  3 +-
 .../configuration/ConfigurationValueListBox.java   |  3 +-
 .../configuration/ConfigurationValueString.java    |  3 +-
 .../ConfigurationValueTableInputGenerator.java     |  3 +-
 .../configuration/DefaultConfigurationFactory.java | 18 +++++-----
 .../resources/AlgorithmExecutionResource.java      |  7 ++--
 21 files changed, 90 insertions(+), 46 deletions(-)

diff --git a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationFactory.java b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationFactory.java
index fd85ba3..6bd758a 100644
--- a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationFactory.java
+++ b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationFactory.java
@@ -18,6 +18,8 @@ package de.metanome.algorithm_integration.configuration;
 
 import de.metanome.algorithm_integration.AlgorithmConfigurationException;
 
+import java.io.FileNotFoundException;
+
 /**
  * Converts {@link ConfigurationRequirement} to {@link de.metanome.algorithm_integration.configuration.ConfigurationValue}s.
  *
@@ -36,7 +38,7 @@ public interface ConfigurationFactory {
    *                                                                           build from the requirement
    */
   ConfigurationValue build(ConfigurationRequirementBoolean requirement)
-    throws AlgorithmConfigurationException;
+    throws AlgorithmConfigurationException, FileNotFoundException;
 
   /**
    * Builds a {@link de.metanome.algorithm_integration.configuration.ConfigurationValue} from
@@ -62,7 +64,7 @@ public interface ConfigurationFactory {
    *                                                                           build from the requirement
    */
   ConfigurationValue build(ConfigurationRequirementDatabaseConnection requirement)
-    throws AlgorithmConfigurationException;
+    throws AlgorithmConfigurationException, FileNotFoundException;
 
   /**
    * Builds a {@link de.metanome.algorithm_integration.configuration.ConfigurationValue} from
@@ -75,7 +77,7 @@ public interface ConfigurationFactory {
    *                                                                           build from the requirement
    */
   ConfigurationValue build(ConfigurationRequirementFileInput requirement)
-    throws AlgorithmConfigurationException;
+    throws AlgorithmConfigurationException, FileNotFoundException;
 
   /**
    * Builds a {@link de.metanome.algorithm_integration.configuration.ConfigurationValue} from
@@ -88,7 +90,7 @@ public interface ConfigurationFactory {
    *                                                                           build from the requirement
    */
   ConfigurationValue build(ConfigurationRequirementInteger requirement)
-    throws AlgorithmConfigurationException;
+    throws AlgorithmConfigurationException, FileNotFoundException;
 
   /**
    * Builds a {@link de.metanome.algorithm_integration.configuration.ConfigurationValue} from
@@ -101,7 +103,7 @@ public interface ConfigurationFactory {
    *                                                                           build from the requirement
    */
   ConfigurationValue build(ConfigurationRequirementListBox requirement)
-    throws AlgorithmConfigurationException;
+    throws AlgorithmConfigurationException, FileNotFoundException;
 
   /**
    * Builds a {@link de.metanome.algorithm_integration.configuration.ConfigurationValue} from
@@ -114,7 +116,7 @@ public interface ConfigurationFactory {
    *                                                                           build from the requirement
    */
   ConfigurationValue build(ConfigurationRequirementCheckBox requirement)
-          throws AlgorithmConfigurationException;
+          throws AlgorithmConfigurationException, FileNotFoundException;
 
   /**
    * Builds a {@link de.metanome.algorithm_integration.configuration.ConfigurationValue} from
@@ -128,7 +130,7 @@ public interface ConfigurationFactory {
    */
 
   ConfigurationValue build(ConfigurationRequirementString requirement)
-    throws AlgorithmConfigurationException;
+    throws AlgorithmConfigurationException, FileNotFoundException;
 
   /**
    * Builds a {@link de.metanome.algorithm_integration.configuration.ConfigurationValue} from
@@ -141,5 +143,5 @@ public interface ConfigurationFactory {
    *                                                                           build from the requirement
    */
   ConfigurationValue build(ConfigurationRequirementTableInput requirement)
-    throws AlgorithmConfigurationException;
+    throws AlgorithmConfigurationException, FileNotFoundException;
 }
diff --git a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirement.java b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirement.java
index 6ff17ee..cfba969 100644
--- a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirement.java
+++ b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirement.java
@@ -22,6 +22,7 @@ import de.metanome.algorithm_integration.Algorithm;
 import de.metanome.algorithm_integration.AlgorithmConfigurationException;
 
 import javax.xml.bind.annotation.XmlTransient;
+import java.io.FileNotFoundException;
 import java.io.Serializable;
 
 /**
@@ -224,6 +225,6 @@ public abstract class ConfigurationRequirement<T extends ConfigurationSetting> i
    */
   @XmlTransient
   public abstract ConfigurationValue build(ConfigurationFactory factory)
-    throws AlgorithmConfigurationException;
+          throws AlgorithmConfigurationException, FileNotFoundException;
 
 }
diff --git a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementBoolean.java b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementBoolean.java
index 2951b8d..59614f5 100644
--- a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementBoolean.java
+++ b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementBoolean.java
@@ -21,6 +21,7 @@ import com.fasterxml.jackson.annotation.JsonTypeName;
 import de.metanome.algorithm_integration.AlgorithmConfigurationException;
 
 import javax.xml.bind.annotation.XmlTransient;
+import java.io.FileNotFoundException;
 
 
 /**
@@ -60,7 +61,7 @@ public class ConfigurationRequirementBoolean
   @XmlTransient
   @Override
   public ConfigurationValue build(ConfigurationFactory factory)
-    throws AlgorithmConfigurationException {
+          throws AlgorithmConfigurationException, FileNotFoundException {
     return factory.build(this);
   }
 
diff --git a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementCheckBox.java b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementCheckBox.java
index d3ec6de..c1763e9 100644
--- a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementCheckBox.java
+++ b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementCheckBox.java
@@ -21,6 +21,7 @@ import com.fasterxml.jackson.annotation.JsonTypeName;
 import de.metanome.algorithm_integration.AlgorithmConfigurationException;
 
 import javax.xml.bind.annotation.XmlTransient;
+import java.io.FileNotFoundException;
 import java.util.List;
 
 /**
@@ -74,7 +75,7 @@ public class ConfigurationRequirementCheckBox
     @XmlTransient
     @Override
     public ConfigurationValue build(ConfigurationFactory factory)
-            throws AlgorithmConfigurationException {
+            throws AlgorithmConfigurationException, FileNotFoundException {
         return factory.build(this);
     }
 
diff --git a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementDatabaseConnection.java b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementDatabaseConnection.java
index 37e7fb1..77c356b 100644
--- a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementDatabaseConnection.java
+++ b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementDatabaseConnection.java
@@ -20,6 +20,7 @@ import com.fasterxml.jackson.annotation.JsonTypeName;
 import de.metanome.algorithm_integration.AlgorithmConfigurationException;
 
 import javax.xml.bind.annotation.XmlTransient;
+import java.io.FileNotFoundException;
 import java.util.List;
 
 /**
@@ -69,7 +70,7 @@ public class ConfigurationRequirementDatabaseConnection
   @XmlTransient
   @Override
   public ConfigurationValue build(ConfigurationFactory factory)
-    throws AlgorithmConfigurationException {
+          throws AlgorithmConfigurationException, FileNotFoundException {
     return factory.build(this);
   }
 
diff --git a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementFileInput.java b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementFileInput.java
index 4f715d2..7c6696e 100644
--- a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementFileInput.java
+++ b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementFileInput.java
@@ -20,6 +20,7 @@ import com.fasterxml.jackson.annotation.JsonTypeName;
 import de.metanome.algorithm_integration.AlgorithmConfigurationException;
 
 import javax.xml.bind.annotation.XmlTransient;
+import java.io.FileNotFoundException;
 
 
 /**
@@ -59,7 +60,7 @@ public class ConfigurationRequirementFileInput
   @XmlTransient
   @Override
   public ConfigurationValue build(ConfigurationFactory factory)
-    throws AlgorithmConfigurationException {
+          throws AlgorithmConfigurationException, FileNotFoundException {
     return factory.build(this);
   }
 
diff --git a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementInteger.java b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementInteger.java
index 3b7d18e..ac05ca3 100644
--- a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementInteger.java
+++ b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementInteger.java
@@ -21,6 +21,7 @@ import com.fasterxml.jackson.annotation.JsonTypeName;
 import de.metanome.algorithm_integration.AlgorithmConfigurationException;
 
 import javax.xml.bind.annotation.XmlTransient;
+import java.io.FileNotFoundException;
 
 
 /**
@@ -60,7 +61,7 @@ public class ConfigurationRequirementInteger
   @XmlTransient
   @Override
   public ConfigurationValue build(ConfigurationFactory factory)
-    throws AlgorithmConfigurationException {
+          throws AlgorithmConfigurationException, FileNotFoundException {
     return factory.build(this);
   }
 
diff --git a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementListBox.java b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementListBox.java
index 751d5cc..4154814 100644
--- a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementListBox.java
+++ b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementListBox.java
@@ -21,6 +21,7 @@ import com.fasterxml.jackson.annotation.JsonTypeName;
 import de.metanome.algorithm_integration.AlgorithmConfigurationException;
 
 import javax.xml.bind.annotation.XmlTransient;
+import java.io.FileNotFoundException;
 import java.util.List;
 
 /**
@@ -74,7 +75,7 @@ public class ConfigurationRequirementListBox
   @XmlTransient
   @Override
   public ConfigurationValue build(ConfigurationFactory factory)
-    throws AlgorithmConfigurationException {
+          throws AlgorithmConfigurationException, FileNotFoundException {
     return factory.build(this);
   }
 
diff --git a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementString.java b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementString.java
index b3fe9cb..ff5f32e 100644
--- a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementString.java
+++ b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementString.java
@@ -20,6 +20,7 @@ import com.fasterxml.jackson.annotation.JsonTypeName;
 import de.metanome.algorithm_integration.AlgorithmConfigurationException;
 
 import javax.xml.bind.annotation.XmlTransient;
+import java.io.FileNotFoundException;
 
 
 /**
@@ -59,7 +60,7 @@ public class ConfigurationRequirementString
   @XmlTransient
   @Override
   public ConfigurationValue build(ConfigurationFactory factory)
-    throws AlgorithmConfigurationException {
+          throws AlgorithmConfigurationException, FileNotFoundException {
     return factory.build(this);
   }
 
diff --git a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementTableInput.java b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementTableInput.java
index 02d2055..b72ac8a 100644
--- a/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementTableInput.java
+++ b/algorithm_integration/src/main/java/de/metanome/algorithm_integration/configuration/ConfigurationRequirementTableInput.java
@@ -21,6 +21,7 @@ import com.google.common.annotations.GwtIncompatible;
 import de.metanome.algorithm_integration.AlgorithmConfigurationException;
 
 import javax.xml.bind.annotation.XmlTransient;
+import java.io.FileNotFoundException;
 
 
 /**
@@ -59,7 +60,7 @@ public class ConfigurationRequirementTableInput
   @XmlTransient
   @Override
   public ConfigurationValue build(ConfigurationFactory factory)
-    throws AlgorithmConfigurationException {
+          throws AlgorithmConfigurationException, FileNotFoundException {
     return factory.build(this);
   }
 
diff --git a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValue.java b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValue.java
index 203223b..61178ba 100644
--- a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValue.java
+++ b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValue.java
@@ -23,6 +23,7 @@ import de.metanome.algorithm_integration.Algorithm;
 import de.metanome.algorithm_integration.AlgorithmConfigurationException;
 import de.metanome.algorithm_integration.configuration.ConfigurationRequirement;
 
+import java.io.FileNotFoundException;
 import java.util.Set;
 
 @JsonTypeInfo(
@@ -70,7 +71,7 @@ public abstract class ConfigurationValue<T, R extends ConfigurationRequirement<?
    * @throws de.metanome.algorithm_integration.AlgorithmConfigurationException if requirement could not be converted into value
    */
   public ConfigurationValue(R requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     this.identifier = requirement.getIdentifier();
     this.values = convertToValues(requirement);
   }
@@ -83,7 +84,7 @@ public abstract class ConfigurationValue<T, R extends ConfigurationRequirement<?
    * @throws de.metanome.algorithm_integration.AlgorithmConfigurationException if requirement could not be converted into value
    */
   protected abstract T[] convertToValues(R requirement)
-    throws AlgorithmConfigurationException;
+          throws AlgorithmConfigurationException, FileNotFoundException;
 
   /**
    * {@inheritDoc}
diff --git a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueBoolean.java b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueBoolean.java
index a3493d6..8219bca 100644
--- a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueBoolean.java
+++ b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueBoolean.java
@@ -22,6 +22,7 @@ import de.metanome.algorithm_integration.algorithm_types.BooleanParameterAlgorit
 import de.metanome.algorithm_integration.configuration.ConfigurationRequirementBoolean;
 import de.metanome.algorithm_integration.configuration.ConfigurationSettingBoolean;
 
+import java.io.FileNotFoundException;
 import java.util.Set;
 
 /**
@@ -38,7 +39,7 @@ public class ConfigurationValueBoolean
   }
 
   public ConfigurationValueBoolean(ConfigurationRequirementBoolean requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     super(requirement);
   }
 
diff --git a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueCheckBox.java b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueCheckBox.java
index 629aa0e..a65b33f 100644
--- a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueCheckBox.java
+++ b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueCheckBox.java
@@ -22,6 +22,7 @@ import de.metanome.algorithm_integration.algorithm_types.CheckBoxParameterAlgori
 import de.metanome.algorithm_integration.configuration.ConfigurationRequirementCheckBox;
 import de.metanome.algorithm_integration.configuration.ConfigurationSettingCheckBox;
 
+import java.io.FileNotFoundException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
@@ -37,7 +38,7 @@ public class ConfigurationValueCheckBox
     }
 
     public ConfigurationValueCheckBox(ConfigurationRequirementCheckBox requirement)
-            throws AlgorithmConfigurationException {
+            throws AlgorithmConfigurationException, FileNotFoundException {
         super(requirement);
     }
 
diff --git a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueDatabaseConnectionGenerator.java b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueDatabaseConnectionGenerator.java
index 7a02dbe..0596ef8 100644
--- a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueDatabaseConnectionGenerator.java
+++ b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueDatabaseConnectionGenerator.java
@@ -24,6 +24,7 @@ import de.metanome.algorithm_integration.configuration.ConfigurationSettingDatab
 import de.metanome.algorithm_integration.input.DatabaseConnectionGenerator;
 import de.metanome.backend.input.database.DefaultDatabaseConnectionGenerator;
 
+import java.io.FileNotFoundException;
 import java.util.Set;
 
 /**
@@ -45,7 +46,7 @@ public class ConfigurationValueDatabaseConnectionGenerator
 
   public ConfigurationValueDatabaseConnectionGenerator(
     ConfigurationRequirementDatabaseConnection requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     super(requirement);
   }
 
diff --git a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueFileInputGenerator.java b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueFileInputGenerator.java
index de8d21c..a6e3924 100644
--- a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueFileInputGenerator.java
+++ b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueFileInputGenerator.java
@@ -22,8 +22,14 @@ import de.metanome.algorithm_integration.algorithm_types.FileInputParameterAlgor
 import de.metanome.algorithm_integration.configuration.ConfigurationRequirementFileInput;
 import de.metanome.algorithm_integration.configuration.ConfigurationSettingFileInput;
 import de.metanome.algorithm_integration.input.FileInputGenerator;
+import de.metanome.backend.algorithm_loading.InputDataFinder;
 import de.metanome.backend.input.file.DefaultFileInputGenerator;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FilenameFilter;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Set;
 
 /**
@@ -44,25 +50,45 @@ public class ConfigurationValueFileInputGenerator
   }
 
   public ConfigurationValueFileInputGenerator(ConfigurationRequirementFileInput requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     super(requirement);
   }
 
   @Override
   protected FileInputGenerator[] convertToValues(
     ConfigurationRequirementFileInput requirement)
-    throws AlgorithmConfigurationException {
+          throws AlgorithmConfigurationException, FileNotFoundException {
     ConfigurationSettingFileInput[] settings = requirement.getSettings();
 
-    FileInputGenerator[]
+    List<FileInputGenerator>
       fileInputGenerators =
-      new FileInputGenerator[settings.length];
+      new ArrayList<>();
 
     for (int i = 0; i < settings.length; i++) {
-      fileInputGenerators[i] = new DefaultFileInputGenerator(settings[i]);
+      File currFile = new File(settings[i].getFileName());
+      if (currFile.isFile()) {
+        fileInputGenerators.add(new DefaultFileInputGenerator(currFile, settings[i]));
+      } else if (currFile.isDirectory()) {
+        File[] filesInDirectory = currFile.listFiles(new FilenameFilter() {
+          @Override
+          public boolean accept(File file, String name) {
+            for (String fileEnding : InputDataFinder.ACCEPTED_FILE_ENDINGS) {
+              if (name.endsWith(fileEnding)) {
+                return true;
+              }
+            }
+            return false;
+          }
+        });
+        for (File file : filesInDirectory) {
+          fileInputGenerators.add(new DefaultFileInputGenerator(file, settings[i]));
+        }
+      } else {
+        throw new FileNotFoundException();
+      }
     }
-
-    return fileInputGenerators;
+    FileInputGenerator[] fileInputArray = new FileInputGenerator[fileInputGenerators.size()];
+    return fileInputGenerators.toArray(fileInputArray);
   }
 
   @Override
diff --git a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueInteger.java b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueInteger.java
index ffd0b2c..a853749 100644
--- a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueInteger.java
+++ b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueInteger.java
@@ -22,6 +22,7 @@ import de.metanome.algorithm_integration.algorithm_types.IntegerParameterAlgorit
 import de.metanome.algorithm_integration.configuration.ConfigurationRequirementInteger;
 import de.metanome.algorithm_integration.configuration.ConfigurationSettingInteger;
 
+import java.io.FileNotFoundException;
 import java.util.Set;
 
 /**
@@ -40,7 +41,7 @@ public class ConfigurationValueInteger
   }
 
   public ConfigurationValueInteger(ConfigurationRequirementInteger requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     super(requirement);
   }
 
diff --git a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueListBox.java b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueListBox.java
index 7614176..6adad5a 100644
--- a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueListBox.java
+++ b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueListBox.java
@@ -22,6 +22,7 @@ import de.metanome.algorithm_integration.algorithm_types.ListBoxParameterAlgorit
 import de.metanome.algorithm_integration.configuration.ConfigurationRequirementListBox;
 import de.metanome.algorithm_integration.configuration.ConfigurationSettingListBox;
 
+import java.io.FileNotFoundException;
 import java.util.Set;
 
 public class ConfigurationValueListBox
@@ -35,7 +36,7 @@ public class ConfigurationValueListBox
   }
 
   public ConfigurationValueListBox(ConfigurationRequirementListBox requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     super(requirement);
   }
 
diff --git a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueString.java b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueString.java
index bf39cc9..4739ba6 100644
--- a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueString.java
+++ b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueString.java
@@ -22,6 +22,7 @@ import de.metanome.algorithm_integration.algorithm_types.StringParameterAlgorith
 import de.metanome.algorithm_integration.configuration.ConfigurationRequirementString;
 import de.metanome.algorithm_integration.configuration.ConfigurationSettingString;
 
+import java.io.FileNotFoundException;
 import java.util.Set;
 
 /**
@@ -40,7 +41,7 @@ public class ConfigurationValueString
   }
 
   public ConfigurationValueString(ConfigurationRequirementString requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     super(requirement);
   }
 
diff --git a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueTableInputGenerator.java b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueTableInputGenerator.java
index eb0952b..001211c 100644
--- a/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueTableInputGenerator.java
+++ b/backend/src/main/java/de/metanome/backend/configuration/ConfigurationValueTableInputGenerator.java
@@ -24,6 +24,7 @@ import de.metanome.algorithm_integration.configuration.ConfigurationSettingTable
 import de.metanome.algorithm_integration.input.TableInputGenerator;
 import de.metanome.backend.input.database.DefaultTableInputGenerator;
 
+import java.io.FileNotFoundException;
 import java.util.Set;
 
 /**
@@ -44,7 +45,7 @@ public class ConfigurationValueTableInputGenerator
   }
 
   public ConfigurationValueTableInputGenerator(ConfigurationRequirementTableInput requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     super(requirement);
   }
 
diff --git a/backend/src/main/java/de/metanome/backend/configuration/DefaultConfigurationFactory.java b/backend/src/main/java/de/metanome/backend/configuration/DefaultConfigurationFactory.java
index 237e490..c9fb9ec 100644
--- a/backend/src/main/java/de/metanome/backend/configuration/DefaultConfigurationFactory.java
+++ b/backend/src/main/java/de/metanome/backend/configuration/DefaultConfigurationFactory.java
@@ -20,6 +20,8 @@ import de.metanome.algorithm_integration.AlgorithmConfigurationException;
 import de.metanome.algorithm_integration.configuration.*;
 import de.metanome.backend.input.DefaultRelationalInputGeneratorInitializer;
 
+import java.io.FileNotFoundException;
+
 /**
  * Converts given {@link de.metanome.algorithm_integration.configuration.ConfigurationRequirement}s
  * to the {@link de.metanome.algorithm_integration.configuration.ConfigurationValue}s.
@@ -37,7 +39,7 @@ public class DefaultConfigurationFactory implements ConfigurationFactory {
    */
   @Override
   public ConfigurationValueBoolean build(ConfigurationRequirementBoolean requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     return new ConfigurationValueBoolean(requirement);
   }
 
@@ -50,7 +52,7 @@ public class DefaultConfigurationFactory implements ConfigurationFactory {
    */
   @Override
   public ConfigurationValueInteger build(ConfigurationRequirementInteger requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     return new ConfigurationValueInteger(requirement);
   }
 
@@ -63,7 +65,7 @@ public class DefaultConfigurationFactory implements ConfigurationFactory {
    */
   @Override
   public ConfigurationValueListBox build(ConfigurationRequirementListBox requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     return new ConfigurationValueListBox(requirement);
   }
 
@@ -78,7 +80,7 @@ public class DefaultConfigurationFactory implements ConfigurationFactory {
    */
   @Override
   public ConfigurationValueCheckBox build(ConfigurationRequirementCheckBox requirement)
-          throws AlgorithmConfigurationException {
+          throws AlgorithmConfigurationException, FileNotFoundException {
     return new ConfigurationValueCheckBox(requirement);
   }
 
@@ -114,7 +116,7 @@ public class DefaultConfigurationFactory implements ConfigurationFactory {
   @Override
   public ConfigurationValueDatabaseConnectionGenerator build(
     ConfigurationRequirementDatabaseConnection requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     return new ConfigurationValueDatabaseConnectionGenerator(requirement);
   }
 
@@ -128,7 +130,7 @@ public class DefaultConfigurationFactory implements ConfigurationFactory {
    */
   @Override
   public ConfigurationValueFileInputGenerator build(ConfigurationRequirementFileInput requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     return new ConfigurationValueFileInputGenerator(requirement);
   }
 
@@ -141,7 +143,7 @@ public class DefaultConfigurationFactory implements ConfigurationFactory {
    */
   @Override
   public ConfigurationValueString build(ConfigurationRequirementString requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     return new ConfigurationValueString(requirement);
   }
 
@@ -156,7 +158,7 @@ public class DefaultConfigurationFactory implements ConfigurationFactory {
    */
   @Override
   public ConfigurationValueTableInputGenerator build(ConfigurationRequirementTableInput requirement)
-    throws AlgorithmConfigurationException {
+    throws AlgorithmConfigurationException, FileNotFoundException {
     return new ConfigurationValueTableInputGenerator(requirement);
   }
 
diff --git a/backend/src/main/java/de/metanome/backend/resources/AlgorithmExecutionResource.java b/backend/src/main/java/de/metanome/backend/resources/AlgorithmExecutionResource.java
index 0be55b5..073f5b6 100644
--- a/backend/src/main/java/de/metanome/backend/resources/AlgorithmExecutionResource.java
+++ b/backend/src/main/java/de/metanome/backend/resources/AlgorithmExecutionResource.java
@@ -35,10 +35,7 @@ import org.hibernate.criterion.Restrictions;
 
 import javax.ws.rs.*;
 import javax.ws.rs.core.Response;
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStreamReader;
+import java.io.*;
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.ArrayList;
@@ -181,7 +178,7 @@ public class AlgorithmExecutionResource {
    * @return an {@link de.metanome.backend.results_db.ExecutionSetting}
    * @throws AlgorithmConfigurationException if configuration requirements could not be converted
    */
-  protected ExecutionSetting buildExecutionSetting(AlgorithmExecutionParams params) throws AlgorithmConfigurationException {
+  protected ExecutionSetting buildExecutionSetting(AlgorithmExecutionParams params) throws AlgorithmConfigurationException, FileNotFoundException {
     ExecutionSetting executionSetting = null;
 
     DefaultConfigurationFactory configurationFactory = new DefaultConfigurationFactory();
-- 
2.10.2


From fad6ed6401d453698947248c2b3d0955d0d580fd Mon Sep 17 00:00:00 2001
From: Maxi Fischer <maxi.fischer@student.hpi.de>
Date: Fri, 25 Nov 2016 15:52:29 +0100
Subject: [PATCH 8/8] newFileInput saves included files instead of directory

---
 .../backend/resources/FileInputResource.java       | 72 +++++++++++++++++-
 frontend/src/main/resources/inputData/WDC_age.csv  | 10 ---
 .../main/resources/inputData/WDC_astronomical.csv  | 12 ---
 frontend/src/main/resources/inputData/WDC_game.csv |  9 ---
 .../src/main/resources/inputData/WDC_symbols.csv   | 66 -----------------
 .../webapp/src/app/backend/availableInputFiles.js  | 14 +++-
 .../src/main/webapp/src/app/new/new.controller.js  | 85 +++++++++++++---------
 7 files changed, 131 insertions(+), 137 deletions(-)
 delete mode 100644 frontend/src/main/resources/inputData/WDC_age.csv
 delete mode 100644 frontend/src/main/resources/inputData/WDC_astronomical.csv
 delete mode 100644 frontend/src/main/resources/inputData/WDC_game.csv
 delete mode 100644 frontend/src/main/resources/inputData/WDC_symbols.csv

diff --git a/backend/src/main/java/de/metanome/backend/resources/FileInputResource.java b/backend/src/main/java/de/metanome/backend/resources/FileInputResource.java
index 396698b..9611b34 100644
--- a/backend/src/main/java/de/metanome/backend/resources/FileInputResource.java
+++ b/backend/src/main/java/de/metanome/backend/resources/FileInputResource.java
@@ -17,13 +17,17 @@
 package de.metanome.backend.resources;
 
 import de.metanome.backend.algorithm_loading.InputDataFinder;
+import de.metanome.backend.results_db.EntityStorageException;
 import de.metanome.backend.results_db.FileInput;
 import de.metanome.backend.results_db.HibernateUtil;
 
 import javax.ws.rs.*;
 import javax.ws.rs.core.Response;
 import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FilenameFilter;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 @Path("file-inputs")
@@ -84,11 +88,13 @@ public class FileInputResource implements Resource<FileInput> {
   public FileInput update(FileInput fileInput) {
     try {
       HibernateUtil.update(fileInput);
-      return fileInput;
+    } catch (EntityStorageException e1) {
+      e1.printStackTrace();
     } catch (Exception e) {
       e.printStackTrace();
       throw new WebException(e, Response.Status.BAD_REQUEST);
     }
+    return fileInput;
   }
 
   /**
@@ -103,7 +109,63 @@ public class FileInputResource implements Resource<FileInput> {
   @Override
   public FileInput get(@PathParam("id") long id) {
     try {
-      return (FileInput) HibernateUtil.retrieve(FileInput.class, id);
+      FileInput fileInput = (FileInput) HibernateUtil.retrieve(FileInput.class, id);
+      if((new File(fileInput.getFileName())).isFile()) {
+        return fileInput;
+      }
+    } catch (EntityStorageException e1) {
+      e1.printStackTrace();
+    } catch (Exception e) {
+      e.printStackTrace();
+      throw new WebException(e, Response.Status.BAD_REQUEST);
+    }
+    return new FileInput();
+  }
+
+  /**
+   * retrieves Files from a Directory
+   *
+   * @param name the name of the FileInput of a Directory
+   * @return the retrieved Files
+   */
+  @GET
+  @Path("/get-directory-files/{name}")
+  //@Consumes("application/json")
+  @Produces("application/json")
+  public List<FileInput> getDirectoryFiles(@PathParam("name") String name) {
+    try {
+      List<FileInput> result = new ArrayList<>();
+      //FileInput fileInput = (FileInput) HibernateUtil.retrieve(FileInput.class, id.getId());
+      File inpFile = new File(name);
+
+      if (inpFile.isDirectory()) {
+        File[] directoryFiles = inpFile.listFiles(new FilenameFilter() {
+          @Override
+          public boolean accept(File file, String name) {
+            for (String fileEnding : InputDataFinder.ACCEPTED_FILE_ENDINGS) {
+              if (name.endsWith(fileEnding)) {
+                return true;
+              }
+            }
+            return false;
+          }
+        });
+        for (File curFile : directoryFiles) {
+          FileInput curFileInput = new FileInput(curFile.getName());
+          curFileInput.setFileName(curFile.getName());
+          //HibernateUtil.store(curFileInput);
+          result.add((FileInput) HibernateUtil.retrieve(FileInput.class, curFileInput.getId()));
+        }
+      } else if (inpFile.isFile()) {
+        FileInput curFileInput = new FileInput(inpFile.getName());
+        curFileInput.setFileName(inpFile.getName());
+        //HibernateUtil.store(curFileInput);
+        result.add((FileInput) HibernateUtil.retrieve(FileInput.class, curFileInput.getId()));
+
+      } else {
+        throw new FileNotFoundException();
+      }
+      return result;
     } catch (Exception e) {
       e.printStackTrace();
       throw new WebException(e, Response.Status.BAD_REQUEST);
@@ -123,11 +185,13 @@ public class FileInputResource implements Resource<FileInput> {
   public FileInput store(FileInput file) {
     try {
       HibernateUtil.store(file);
-      return file;
+      } catch (EntityStorageException e1) {
+      e1.printStackTrace();
     } catch (Exception e) {
       e.printStackTrace();
       throw new WebException(e, Response.Status.BAD_REQUEST);
     }
+    return file;
   }
 
   /**
@@ -142,6 +206,8 @@ public class FileInputResource implements Resource<FileInput> {
     try {
       FileInput fileInput = (FileInput) HibernateUtil.retrieve(FileInput.class, id);
       HibernateUtil.delete(fileInput);
+    } catch (EntityStorageException e1) {
+      e1.printStackTrace();
     } catch (Exception e) {
       e.printStackTrace();
       throw new WebException(e, Response.Status.BAD_REQUEST);
diff --git a/frontend/src/main/resources/inputData/WDC_age.csv b/frontend/src/main/resources/inputData/WDC_age.csv
deleted file mode 100644
index 5877395..0000000
--- a/frontend/src/main/resources/inputData/WDC_age.csv
+++ /dev/null
@@ -1,10 +0,0 @@
-Planet,RotationPeriod,RevolutionPeriod
-Mercury,58.6 days,87.97 days
-Venus,243 days,224.7 days
-Earth,0.99 days,365.26 days
-Mars,1.03 days,1.88 years
-Jupiter,0.41 days,11.86 years
-Saturn,0.45 days,29.46 years
-Uranus,0.72 days,84.01 years
-Neptune,0.67 days,164.79 years
-Pluto,6.39 days,248.59 years
\ No newline at end of file
diff --git a/frontend/src/main/resources/inputData/WDC_astronomical.csv b/frontend/src/main/resources/inputData/WDC_astronomical.csv
deleted file mode 100644
index 10e1cc7..0000000
--- a/frontend/src/main/resources/inputData/WDC_astronomical.csv
+++ /dev/null
@@ -1,12 +0,0 @@
-Name,IAU_Abbreviation,Symbol,Unicode,UnicodeDisplay,Represents
-Mercury,Me,,U+263F; (dec 9791),☿,"Mercury&#39;s winged helmet and caduceus, or the caduceus alone"
-Venus,V,,U+2640; (dec 9792),♀,Venus&#39; hand mirror
-Earth,E,,U+2641; (dec 9793),♁,"a globus cruciger, or an inverted symbol for Venus; more popular in non-geocentric contexts"
-Earth,E,,U+1F728; (dec 128808),ⴲ,Globe with equator and a meridian
-Mars,Ma,,U+2642; (dec 9794),♂,Mars&#39; shield and spear
-Jupiter,J,,U+2643; (dec 9795),♃,"Jupiter&#39;s thunderbolt, an eagle, or the letter zeta or Z for Zeus, the Greek god analogous to Jupite"
-Saturn,S,,U+2644; (dec 9796),♄,Saturn&#39;s sickle or scythe
-Uranus,U,,U+26E2; (dec 9954),⛢,Platinum
-Uranus,U,,U+2645; (dec 9797),♅,"A globe surmounted by the letter H (for Herschel), more common in older or British literature"
-Neptune,N,,U+2646; (dec 9798),♆,Neptune&#39;s trident
-Neptune,N,,N/A,N/A,"A globe surmounted by the letters &quot;L&quot; and &quot;V&quot;(, for Le Verrier), more common in older, especially Fr"
\ No newline at end of file
diff --git a/frontend/src/main/resources/inputData/WDC_game.csv b/frontend/src/main/resources/inputData/WDC_game.csv
deleted file mode 100644
index d16019f..0000000
--- a/frontend/src/main/resources/inputData/WDC_game.csv
+++ /dev/null
@@ -1,9 +0,0 @@
-SitGoBuy-in,DivisionName,LowOrbitLeaderBoardPrizePool,HighOrbitLeaderBoardPrizePool,TotalDivisionPrizePool
-$1-$2.99,Mercury,"$1,500","$1,500","$3,000.00"
-$3-$4.99,Mars,"$2,000","$2,000","$4,000.00"
-$5-$9.99,Venus,"$2,500","$2,500","$5,000.00"
-$10-$19.99,Earth,"$3,000","$3,000","$6,000.00"
-$20-$49.99,Neptune,"$3,500","$3,500","$7,000.00"
-$50-$99.99,Uranus,"$4,000","$4,000","$8,000.00"
-$100-$299.99,Saturn,"$4,500","$4,500","$9,000.00"
-$300+,Jupiter,"$5,000","$5,000","$10,000.00"
\ No newline at end of file
diff --git a/frontend/src/main/resources/inputData/WDC_symbols.csv b/frontend/src/main/resources/inputData/WDC_symbols.csv
deleted file mode 100644
index 57c1e6c..0000000
--- a/frontend/src/main/resources/inputData/WDC_symbols.csv
+++ /dev/null
@@ -1,66 +0,0 @@
-Symbol,Unicode,Glyph
-Sun,U+2609,☉
-Sun,U+1F71A,🜚
-Moon,U+263D,☽
-Moon,U+263E,☾
-Mercury,U+263F,☿
-Venus,U+2640,♀
-Earth,U+1F728,🜨
-Mars,U+2642,♂
-Jupiter,U+2643,♃
-Saturn,U+2644,♄
-Uranus,U+2645,♅
-Uranus,U+26E2,⛢
-Neptune,U+2646,♆
-1 Ceres,U+02A1,ʡ
-2 Pallas,U+26B4,⚴
-3 Juno,U+26B5,⚵
-4 Vesta,U+26B6,⚶
-10 Hygiea,U+2695,⚕
-2060 Chiron,U+26B7,⚷
-Eris,not present,--
-Eris,not present,--
-Eris,≈ U+2641,♁
-Eris,≈ U+29EC,⧬
-Pluto,U+2647,♇
-Pluto,not present,--
-Aries,U+2648,♈
-Taurus,U+2649,♉
-Gemini,U+264A,♊
-Cancer,U+264B,♋
-Leo,U+264C,♌
-Virgo,U+264D,♍
-Libra,U+264E,♎
-Scorpio,U+264F,♏
-Sagittarius,U+2650,♐
-Capricorn,U+2651,♑
-Capricorn,U+2651,♑
-Aquarius,U+2652,♒
-Pisces,U+2653,♓
-Conjunction,U+260C,☌
-Semisextile,U+26BA,⚺
-Semi-square,≈ U+2220,∠
-Sextile,U+26B9,⚹
-Quintile,U+0051,Q
-Square,U+25A1,□
-Trine,U+25B3,△
-Sesquiquadrate,U+26BC,⚼
-Biquintile,U+0062 U+0051,bQ
-Quincunx,U+26BB,⚻
-Opposition,U+260D,☍
-New moon,U+1F311,🌑
-Crescent moon,U+1F312,🌒
-First quarter moon,U+1F313,🌓
-Gibbous moon,U+1F314,🌔
-Full moon,U+1F315,🌕
-Disseminating moon,U+1F316,🌖
-Last quarter moon,U+1F317,🌗
-Balsamic moon,U+1F318,🌘
-Ascendant,not plain text,ASC
-Midheaven,not plain text,MC
-Ascending node,U+260A,☊
-Descending node,U+260B,☋
-Black Moon Lilith,U+26B8,⚸
-Retrograde motion,≈ U+211E,℞
-Lot of fortune,≈ U+2297,⊗
-Comet,U+2604,☄
\ No newline at end of file
diff --git a/frontend/src/main/webapp/src/app/backend/availableInputFiles.js b/frontend/src/main/webapp/src/app/backend/availableInputFiles.js
index 34a7c86..d66b125 100644
--- a/frontend/src/main/webapp/src/app/backend/availableInputFiles.js
+++ b/frontend/src/main/webapp/src/app/backend/availableInputFiles.js
@@ -3,10 +3,20 @@
 angular.module('Metanome')
   .factory('AvailableInputFiles', ['$resource', 'EnvironmentConfig',
     function ($resource, EnvironmentConfig) {
-      return $resource(EnvironmentConfig.API + '/api/file-inputs/available-input-files', {}, {
+      return $resource(EnvironmentConfig.API + '/api/file-inputs/:operation/:name', {}, {
         get: {
           method: 'GET',
-          params: {},
+          params: {
+            operation: 'available-input-files'
+            },
+          isArray: true
+        },
+        getDirectory: {
+          method: 'GET',
+          params: {
+            operation: 'get-directory-files',
+            name: '@name'
+          },
           isArray: true
         }
       });
diff --git a/frontend/src/main/webapp/src/app/new/new.controller.js b/frontend/src/main/webapp/src/app/new/new.controller.js
index db44648..08a40cd 100644
--- a/frontend/src/main/webapp/src/app/new/new.controller.js
+++ b/frontend/src/main/webapp/src/app/new/new.controller.js
@@ -148,7 +148,6 @@ angular.module('Metanome')
         }
       ];
 
-      $scope.datasources = [];
       var usedDatabases = [];
 
       // Get all data sources for each category from the database
@@ -434,6 +433,7 @@ angular.module('Metanome')
             });
           }
 
+
           // Save or update a file input
           function saveNewFileInput(file) {
             resetAlgorithm();
@@ -442,42 +442,57 @@ angular.module('Metanome')
               return;
             }
             startSpin();
-            var obj = {
-              'type': 'fileInput',
-              'id': file.id || 1,
-              'name': file.fileName || '',
-              'fileName': file.fileName || '',
-              'separator': file.separator || '',
-              'quoteChar': file.quoteChar || '',
-              'escapeChar': file.escapeChar || '',
-              'skipLines': file.skipLines || '0',
-              'strictQuotes': file.strictQuotes || false,
-              'ignoreLeadingWhiteSpace': file.ignoreLeadingWhiteSpace || false,
-              'hasHeader': file.hasHeader || false,
-              'skipDifferingLines': file.skipDifferingLines || false,
-              'comment': file.comment || '',
-              'nullValue': file.nullValue || ''
-            };
             if ($scope.$parent.editFileInput) {
-              $scope.$parent.InputStore.updateFileInput(obj, function () {
-                initializeDatasources();
-                ngDialog.closeAll();
-                stopSpin();
-              }, function (errorMessage) {
-                openError('An error occurred when updating this datasource: ' + errorMessage.data);
-                stopSpin();
+              $scope.AvailableInputFiles.getDirectory({name: file.fileName}).forEach(function(dirFile){
+                var curObj = {
+                  'type': 'fileInput',
+                  'id': dirFile.id || 1,
+                  'name': dirFile.fileName || '',
+                  'fileName': dirFile.fileName || '',
+                  'separator': dirFile.separator || '',
+                  'quoteChar': dirFile.quoteChar || '',
+                  'escapeChar': dirFile.escapeChar || '',
+                  'skipLines': dirFile.skipLines || '0',
+                  'strictQuotes': dirFile.strictQuotes || false,
+                  'ignoreLeadingWhiteSpace': dirFile.ignoreLeadingWhiteSpace || false,
+                  'hasHeader': dirFile.hasHeader || false,
+                  'skipDifferingLines': dirFile.skipDifferingLines || false,
+                  'comment': dirFile.comment || '',
+                  'nullValue': dirFile.nullValue || ''
+                };
+
+                  $scope.$parent.InputStore.updateFileInput(dirFile);
               })
-            } else {
-              $scope.$parent.InputStore.newFileInput(obj, function () {
-                initializeDatasources();
-                ngDialog.closeAll();
-                stopSpin();
-              }, function (errorMessage) {
-                openError('An error occurred when saving this datasource: ' + errorMessage.data);
-                stopSpin();
-              })
-            }
-          }
+            initializeDatasources();
+            ngDialog.closeAll();
+            stopSpin();
+          } else {
+            $scope.AvailableInputFiles.getDirectory({name: file.fileName}).forEach(function(dirFile) {
+              var curObj = {
+                'type': 'fileInput',
+                'id': dirFile.id || 1,
+                'name': dirFile.fileName || '',
+                'fileName': dirFile.fileName || '',
+                'separator': dirFile.separator || '',
+                'quoteChar': dirFile.quoteChar || '',
+                'escapeChar': dirFile.escapeChar || '',
+                'skipLines': dirFile.skipLines || '0',
+                'strictQuotes': dirFile.strictQuotes || false,
+                'ignoreLeadingWhiteSpace': dirFile.ignoreLeadingWhiteSpace || false,
+                'hasHeader': dirFile.hasHeader || false,
+                'skipDifferingLines': dirFile.skipDifferingLines || false,
+                'comment': dirFile.comment || '',
+                'nullValue': dirFile.nullValue || ''
+              };
+
+                $scope.$parent.InputStore.newFileInput(dirFile);
+            })
+          initializeDatasources();
+          ngDialog.closeAll();
+          stopSpin();
+
+        }
+      }
 
           // Save or update a database connection
           function saveDatabaseInput(database) {
-- 
2.10.2

